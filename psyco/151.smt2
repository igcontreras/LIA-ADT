; benchmark generated from python API
(set-info :status unknown)
(declare-fun W_S1_V4 () Bool)
(declare-fun W_S1_V2 () Bool)
(declare-fun W_S1_V3 () Bool)
(declare-fun W_S1_V1 () Bool)
(declare-fun W_S1_V8 () Bool)
(declare-fun R_S1_V3 () Bool)
(declare-fun R_E1_V7 () Bool)
(declare-fun R_E1_V4 () Bool)
(declare-fun R_E1_V2 () Bool)
(declare-fun R_E1_V3 () Bool)
(declare-fun R_E1_V1 () Bool)
(declare-fun R_E1_V8 () Bool)
(declare-fun DISJ_W_S1_R_E1 () Bool)
(declare-fun R_S1_V7 () Bool)
(declare-fun R_S1_V4 () Bool)
(declare-fun R_S1_V2 () Bool)
(declare-fun R_S1_V1 () Bool)
(declare-fun R_S1_V8 () Bool)
(declare-fun DISJ_W_S1_R_S1 () Bool)
(declare-fun W_S1_V7 () Bool)
(assert
 (let (($x3351 (forall ((V8_0 Int) )(forall ((V1_0 Int) )(forall ((V2_0 Int) )(forall ((V4_0 Int) )(forall ((V7_0 Int) )(forall ((MW_S1_V8 Bool) )(forall ((MW_S1_V1 Bool) )(forall ((MW_S1_V3 Bool) )(forall ((MW_S1_V2 Bool) )(forall ((MW_S1_V4 Bool) )(forall ((MW_S1_V7 Bool) )(forall ((S1_V1_!5808 Int) )(forall ((S1_V1_!5815 Int) )(forall ((S1_V3_!5809 Int) )(forall ((S1_V3_!5816 Int) )(forall ((S1_V2_!5810 Int) )(forall ((S1_V2_!5817 Int) )(forall ((E1_!5806 Int) )(forall ((E1_!5813 Int) )(forall ((S1_V8_!5807 Int) )(forall ((S1_V8_!5814 Int) )(forall ((S1_V4_!5811 Int) )(forall ((S1_V4_!5818 Int) )(forall ((S1_V7_!5812 Int) )(forall ((S1_V7_!5819 Int) )(let (($x4968 (and (= (ite MW_S1_V8 S1_V8_!5807 V8_0) (ite MW_S1_V8 S1_V8_!5814 V8_0)) (= (ite MW_S1_V1 S1_V1_!5808 V1_0) (ite MW_S1_V1 S1_V1_!5815 V1_0)) (= (ite MW_S1_V3 S1_V3_!5809 E1_!5806) (+ (- 1) (ite MW_S1_V4 S1_V4_!5818 V4_0))) (= (ite MW_S1_V2 S1_V2_!5810 V2_0) (ite MW_S1_V2 S1_V2_!5817 V2_0)) (= (ite MW_S1_V4 S1_V4_!5811 V4_0) (ite MW_S1_V4 S1_V4_!5818 V4_0)) (= (ite MW_S1_V7 S1_V7_!5812 V7_0) (ite MW_S1_V7 S1_V7_!5819 V7_0)))))
 (let (($x2029 (and (not (<= V2_0 V1_0)) (not (<= V4_0 E1_!5806)) (>= (ite MW_S1_V3 S1_V3_!5809 E1_!5806) (+ (- 1) (ite MW_S1_V4 S1_V4_!5811 V4_0))) (>= (ite MW_S1_V1 S1_V1_!5808 V1_0) (+ (- 1) (ite MW_S1_V2 S1_V2_!5810 V2_0))) (not (<= V4_0 E1_!5813)) (>= E1_!5813 (+ (- 1) (ite MW_S1_V4 S1_V4_!5818 V4_0))) (>= (ite MW_S1_V1 S1_V1_!5815 V1_0) (+ (- 1) (ite MW_S1_V2 S1_V2_!5817 V2_0))))))
 (let (($x43 (= E1_!5806 E1_!5813)))
 (let (($x2342 (and (or (not (or (not R_S1_V3) $x43)) (= S1_V1_!5808 S1_V1_!5815)) (or (not (or (not R_S1_V3) $x43)) (= S1_V3_!5809 S1_V3_!5816)) (or (not (or (not R_S1_V3) (= E1_!5813 E1_!5806))) (= S1_V2_!5817 S1_V2_!5810)) $x43 (or (not (or (not R_S1_V3) $x43)) (= S1_V8_!5807 S1_V8_!5814)) (or (not (or (not R_S1_V3) (= E1_!5813 E1_!5806))) (= S1_V4_!5818 S1_V4_!5811)) (or (not (or (not R_S1_V3) $x43)) (= S1_V7_!5812 S1_V7_!5819)) (or (not MW_S1_V8) W_S1_V8) (or (not MW_S1_V1) W_S1_V1) (or (not MW_S1_V3) W_S1_V3) (or (not MW_S1_V2) W_S1_V2) (or (not MW_S1_V4) W_S1_V4))))
 (or (not $x2342) (not $x2029) $x4968))))))
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 ))
 (let (($x3715 (and W_S1_V4 R_E1_V4)))
 (let (($x2939 (and W_S1_V2 R_E1_V2)))
 (let (($x3292 (and W_S1_V3 R_E1_V3)))
 (let (($x4522 (and W_S1_V1 R_E1_V1)))
 (let (($x5156 (and W_S1_V8 R_E1_V8)))
 (let (($x600 (= DISJ_W_S1_R_E1 (not (or $x5156 $x4522 $x3292 $x2939 $x3715 R_E1_V7)))))
 (let (($x2104 (and W_S1_V4 R_S1_V4)))
 (let (($x3814 (and W_S1_V2 R_S1_V2)))
 (let (($x82 (and W_S1_V3 R_S1_V3)))
 (let (($x1905 (and W_S1_V1 R_S1_V1)))
 (let (($x901 (and W_S1_V8 R_S1_V8)))
 (let (($x5151 (= DISJ_W_S1_R_S1 (not (or $x901 $x1905 $x82 $x3814 $x2104 R_S1_V7)))))
 (and W_S1_V7 $x5151 $x600 $x3351)))))))))))))))
(check-sat)
