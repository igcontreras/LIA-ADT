; benchmark generated from python API
(set-info :status unknown)
(declare-fun R_E2_V3 () Bool)
(declare-fun R_E1_V3 () Bool)
(declare-fun R_E1_V1 () Bool)
(declare-fun W_S1_V6 () Bool)
(declare-fun W_S1_V4 () Bool)
(declare-fun W_S1_V2 () Bool)
(declare-fun W_S1_V3 () Bool)
(declare-fun W_S1_V1 () Bool)
(declare-fun R_E2_V1 () Bool)
(declare-fun R_E1_V6 () Bool)
(declare-fun R_E1_V4 () Bool)
(declare-fun R_E1_V5 () Bool)
(declare-fun R_E1_V2 () Bool)
(declare-fun DISJ_W_S1_R_E1 () Bool)
(declare-fun R_S1_V6 () Bool)
(declare-fun R_S1_V4 () Bool)
(declare-fun R_S1_V5 () Bool)
(declare-fun R_S1_V2 () Bool)
(declare-fun R_S1_V3 () Bool)
(declare-fun R_S1_V1 () Bool)
(declare-fun DISJ_W_S1_R_S1 () Bool)
(declare-fun R_E2_V6 () Bool)
(declare-fun R_E2_V4 () Bool)
(declare-fun R_E2_V5 () Bool)
(declare-fun R_E2_V2 () Bool)
(declare-fun DISJ_W_S1_R_E2 () Bool)
(declare-fun W_S1_V5 () Bool)
(assert
 (let (($x3452 (not (and (not R_E1_V1) (not R_E1_V3)))))
 (let (($x590 (forall ((V1_0 Int) )(forall ((V3_0 Int) )(forall ((V2_0 Int) )(forall ((V4_0 Int) )(forall ((MW_S1_V1 Bool) )(forall ((MW_S1_V3 Bool) )(forall ((MW_S1_V2 Bool) )(forall ((MW_S1_V4 Bool) )(forall ((MW_S1_V6 Bool) )(forall ((E1_!4904 Int) )(forall ((E1_!4907 Int) )(forall ((E1_!4909 Int) )(forall ((E2_!4905 Int) )(forall ((E2_!4906 Int) )(forall ((E2_!4908 Int) )(let (($x2384 (and (not (<= V4_0 E2_!4905)) (not (<= V2_0 E1_!4904)) (>= E2_!4906 V4_0) (>= E1_!4904 (+ (- 1) V2_0)) (not (<= V2_0 E1_!4907)) (not (<= V4_0 E2_!4908)) (>= E1_!4909 V2_0) (>= E2_!4908 (+ (- 1) V4_0)))))
 (let (($x5100 (not MW_S1_V4)))
 (let (($x4794 (or $x5100 W_S1_V4)))
 (let (($x3062 (= E2_!4908 E2_!4906)))
 (let (($x3263 (not R_E2_V3)))
 (let (($x2687 (or $x3263 (= V3_0 E2_!4905))))
 (let (($x4020 (not R_E2_V1)))
 (let (($x6024 (or $x4020 (= E1_!4907 E1_!4904))))
 (let (($x3507 (or (not (and $x6024 $x2687)) $x3062)))
 (let (($x1249 (= E2_!4908 E2_!4905)))
 (let (($x3518 (or (not $x6024) $x1249)))
 (let (($x2312 (or (not $x2687) (= E2_!4905 E2_!4906))))
 (let (($x1259 (not R_E1_V3)))
 (let (($x5905 (or $x1259 (= E2_!4908 V3_0))))
 (let (($x1074 (or (not (and (or (not R_E1_V1) (= E1_!4907 V1_0)) $x5905)) (= E1_!4909 E1_!4907))))
 (let (($x388 (= E1_!4904 E1_!4909)))
 (let (($x956 (not (and (or (not R_E1_V1) (= V1_0 E1_!4907)) (or $x1259 (= V3_0 E2_!4908))))))
 (let (($x3919 (or $x956 $x388)))
 (let (($x1732 (and (= E1_!4904 E1_!4907) $x3919 $x1074 $x2312 $x3518 $x3507 (or (not MW_S1_V1) W_S1_V1) (or (not MW_S1_V3) W_S1_V3) (or (not MW_S1_V2) W_S1_V2) $x4794 (or (not MW_S1_V6) W_S1_V6))))
 (or (not $x1732) (not $x2384) (and (= E1_!4904 (+ (- 1) E1_!4909)) (= E2_!4906 (+ 1 E2_!4908))))))))))))))))))))))))
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 ))
 (let (($x899 (and W_S1_V6 R_E1_V6)))
 (let (($x1105 (and W_S1_V4 R_E1_V4)))
 (let (($x107 (and W_S1_V2 R_E1_V2)))
 (let (($x2473 (and W_S1_V3 R_E1_V3)))
 (let (($x3435 (and W_S1_V1 R_E1_V1)))
 (let (($x1161 (= DISJ_W_S1_R_E1 (not (or $x3435 $x2473 $x107 R_E1_V5 $x1105 $x899)))))
 (let (($x3365 (and W_S1_V6 R_S1_V6)))
 (let (($x1961 (and W_S1_V4 R_S1_V4)))
 (let (($x2951 (and W_S1_V2 R_S1_V2)))
 (let (($x6018 (and W_S1_V3 R_S1_V3)))
 (let (($x1104 (and W_S1_V1 R_S1_V1)))
 (let (($x836 (= DISJ_W_S1_R_S1 (not (or $x1104 $x6018 $x2951 R_S1_V5 $x1961 $x3365)))))
 (let (($x1554 (and W_S1_V6 R_E2_V6)))
 (let (($x652 (and W_S1_V4 R_E2_V4)))
 (let (($x858 (and W_S1_V2 R_E2_V2)))
 (let (($x106 (and W_S1_V3 R_E2_V3)))
 (let (($x1008 (and W_S1_V1 R_E2_V1)))
 (let (($x2771 (= DISJ_W_S1_R_E2 (not (or $x1008 $x106 $x858 R_E2_V5 $x652 $x1554)))))
 (and (and W_S1_V5 $x2771 $x836 $x1161 $x590) $x3452 R_E2_V3))))))))))))))))))))))
(check-sat)
