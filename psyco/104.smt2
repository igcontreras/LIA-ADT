; benchmark generated from python API
(set-info :status unknown)
(declare-fun R_E1_V3 () Bool)
(declare-fun R_E1_V1 () Bool)
(declare-fun W_S1_V6 () Bool)
(declare-fun W_S1_V4 () Bool)
(declare-fun W_S1_V2 () Bool)
(declare-fun W_S1_V3 () Bool)
(declare-fun W_S1_V1 () Bool)
(declare-fun R_E2_V3 () Bool)
(declare-fun R_E2_V1 () Bool)
(declare-fun R_E1_V6 () Bool)
(declare-fun R_E1_V4 () Bool)
(declare-fun R_E1_V5 () Bool)
(declare-fun R_E1_V2 () Bool)
(declare-fun DISJ_W_S1_R_E1 () Bool)
(declare-fun R_S1_V6 () Bool)
(declare-fun R_S1_V4 () Bool)
(declare-fun R_S1_V5 () Bool)
(declare-fun R_S1_V2 () Bool)
(declare-fun R_S1_V3 () Bool)
(declare-fun R_S1_V1 () Bool)
(declare-fun DISJ_W_S1_R_S1 () Bool)
(declare-fun R_E2_V6 () Bool)
(declare-fun R_E2_V4 () Bool)
(declare-fun R_E2_V5 () Bool)
(declare-fun R_E2_V2 () Bool)
(declare-fun DISJ_W_S1_R_E2 () Bool)
(declare-fun W_S1_V5 () Bool)
(assert
 (let (($x2417 (not (and (not R_E1_V1) (not R_E1_V3)))))
 (let (($x4717 (forall ((V1_0 Int) )(forall ((V3_0 Int) )(forall ((V2_0 Int) )(forall ((V4_0 Int) )(forall ((MW_S1_V1 Bool) )(forall ((MW_S1_V3 Bool) )(forall ((MW_S1_V2 Bool) )(forall ((MW_S1_V4 Bool) )(forall ((MW_S1_V6 Bool) )(forall ((E1_!4904 Int) )(forall ((E1_!4907 Int) )(forall ((E1_!4909 Int) )(forall ((E2_!4905 Int) )(forall ((E2_!4906 Int) )(forall ((E2_!4908 Int) )(let (($x862 (and (not (<= V4_0 E2_!4905)) (not (<= V2_0 E1_!4904)) (>= E2_!4906 V4_0) (>= E1_!4904 (+ (- 1) V2_0)) (not (<= V2_0 E1_!4907)) (not (<= V4_0 E2_!4908)) (>= E1_!4909 V2_0) (>= E2_!4908 (+ (- 1) V4_0)))))
 (let (($x478 (not MW_S1_V6)))
 (let (($x2005 (or $x478 W_S1_V6)))
 (let (($x1441 (not MW_S1_V4)))
 (let (($x922 (or $x1441 W_S1_V4)))
 (let (($x5958 (= E2_!4908 E2_!4906)))
 (let (($x1401 (not R_E2_V3)))
 (let (($x5862 (or $x1401 (= V3_0 E2_!4905))))
 (let (($x6060 (not R_E2_V1)))
 (let (($x1300 (or $x6060 (= E1_!4907 E1_!4904))))
 (let (($x2903 (or (not (and $x1300 $x5862)) $x5958)))
 (let (($x1426 (= E2_!4908 E2_!4905)))
 (let (($x2913 (or (not $x1300) $x1426)))
 (let (($x3386 (or (not $x5862) (= E2_!4905 E2_!4906))))
 (let (($x1259 (not R_E1_V3)))
 (let (($x1645 (or $x1259 (= E2_!4908 V3_0))))
 (let (($x5438 (or (not (and (or (not R_E1_V1) (= E1_!4907 V1_0)) $x1645)) (= E1_!4909 E1_!4907))))
 (let (($x3435 (= E1_!4904 E1_!4909)))
 (let (($x3007 (not (and (or (not R_E1_V1) (= V1_0 E1_!4907)) (or $x1259 (= V3_0 E2_!4908))))))
 (let (($x2366 (or $x3007 $x3435)))
 (let (($x1866 (and (= E1_!4904 E1_!4907) $x2366 $x5438 $x3386 $x2913 $x2903 (or (not MW_S1_V1) W_S1_V1) (or (not MW_S1_V3) W_S1_V3) (or (not MW_S1_V2) W_S1_V2) $x922 $x2005)))
 (or (not $x1866) (not $x862) (and (= E1_!4904 (+ (- 1) E1_!4909)) (= E2_!4906 (+ 1 E2_!4908))))))))))))))))))))))))))
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 ))
 (let (($x3149 (and W_S1_V6 R_E1_V6)))
 (let (($x1105 (and W_S1_V4 R_E1_V4)))
 (let (($x410 (and W_S1_V2 R_E1_V2)))
 (let (($x3235 (and W_S1_V3 R_E1_V3)))
 (let (($x2519 (and W_S1_V1 R_E1_V1)))
 (let (($x83 (= DISJ_W_S1_R_E1 (not (or $x2519 $x3235 $x410 R_E1_V5 $x1105 $x3149)))))
 (let (($x4213 (and W_S1_V6 R_S1_V6)))
 (let (($x1961 (and W_S1_V4 R_S1_V4)))
 (let (($x4875 (and W_S1_V2 R_S1_V2)))
 (let (($x68 (and W_S1_V3 R_S1_V3)))
 (let (($x2486 (and W_S1_V1 R_S1_V1)))
 (let (($x3739 (= DISJ_W_S1_R_S1 (not (or $x2486 $x68 $x4875 R_S1_V5 $x1961 $x4213)))))
 (let (($x1786 (and W_S1_V6 R_E2_V6)))
 (let (($x1962 (and W_S1_V4 R_E2_V4)))
 (let (($x1326 (and W_S1_V2 R_E2_V2)))
 (let (($x2499 (and W_S1_V3 R_E2_V3)))
 (let (($x323 (and W_S1_V1 R_E2_V1)))
 (let (($x442 (= DISJ_W_S1_R_E2 (not (or $x323 $x2499 $x1326 R_E2_V5 $x1962 $x1786)))))
 (and (and W_S1_V5 $x442 $x3739 $x83 $x4717) $x2417))))))))))))))))))))))
(check-sat)
