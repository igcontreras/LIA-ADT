; benchmark generated from python API
(set-info :status unknown)
(declare-fun R_E1_V3 () Bool)
(declare-fun R_E1_V1 () Bool)
(declare-fun W_S1_V6 () Bool)
(declare-fun W_S1_V4 () Bool)
(declare-fun W_S1_V2 () Bool)
(declare-fun W_S1_V3 () Bool)
(declare-fun W_S1_V1 () Bool)
(declare-fun R_E2_V1 () Bool)
(declare-fun R_E1_V6 () Bool)
(declare-fun R_E1_V4 () Bool)
(declare-fun R_E1_V5 () Bool)
(declare-fun R_E1_V2 () Bool)
(declare-fun DISJ_W_S1_R_E1 () Bool)
(declare-fun R_S1_V6 () Bool)
(declare-fun R_S1_V4 () Bool)
(declare-fun R_S1_V5 () Bool)
(declare-fun R_S1_V2 () Bool)
(declare-fun R_S1_V3 () Bool)
(declare-fun R_S1_V1 () Bool)
(declare-fun DISJ_W_S1_R_S1 () Bool)
(declare-fun R_E2_V6 () Bool)
(declare-fun R_E2_V4 () Bool)
(declare-fun R_E2_V5 () Bool)
(declare-fun R_E2_V2 () Bool)
(declare-fun DISJ_W_S1_R_E2 () Bool)
(declare-fun W_S1_V5 () Bool)
(declare-fun R_E2_V3 () Bool)
(assert
 (let (($x3552 (not (and (not R_E1_V1) (not R_E1_V3)))))
 (let (($x3531 (forall ((V1_0 Int) )(forall ((V3_0 Int) )(forall ((V2_0 Int) )(forall ((V5_0 Int) )(forall ((V4_0 Int) )(forall ((V6_0 Int) )(forall ((MW_S1_V1 Bool) )(forall ((MW_S1_V3 Bool) )(forall ((MW_S1_V2 Bool) )(forall ((MW_S1_V5 Bool) )(forall ((MW_S1_V4 Bool) )(forall ((MW_S1_V6 Bool) )(forall ((S1_V1_!5123 Int) )(forall ((S1_V3_!5124 Int) )(forall ((S1_V2_!5125 Int) )(forall ((E1_!5120 Int) )(forall ((E1_!5129 Int) )(forall ((E1_!5131 Int) )(forall ((S1_V5_!5126 Int) )(forall ((E2_!5121 Int) )(forall ((E2_!5122 Int) )(forall ((E2_!5130 Int) )(forall ((S1_V4_!5127 Int) )(forall ((S1_V6_!5128 Int) )(let (($x4364 (and (= (ite MW_S1_V1 S1_V1_!5123 E1_!5120) (+ (- 1) E1_!5131)) (= (ite MW_S1_V3 S1_V3_!5124 E2_!5122) E2_!5130) (= (ite MW_S1_V2 S1_V2_!5125 V2_0) V2_0) (= (ite MW_S1_V5 S1_V5_!5126 V5_0) V5_0) (= (ite MW_S1_V4 S1_V4_!5127 V4_0) V4_0) (= (ite MW_S1_V6 S1_V6_!5128 V6_0) V6_0))))
 (let (($x4647 (and (not (<= V4_0 E2_!5121)) (not (<= V2_0 E1_!5120)) (not (<= V4_0 E2_!5122)) (>= (ite MW_S1_V3 S1_V3_!5124 E2_!5122) (+ (- 1) (ite MW_S1_V4 S1_V4_!5127 V4_0))) (>= (ite MW_S1_V1 S1_V1_!5123 E1_!5120) (+ (- 1) (ite MW_S1_V2 S1_V2_!5125 V2_0))) (not (<= V2_0 E1_!5129)) (not (<= V4_0 E2_!5130)) (>= E1_!5131 V2_0) (>= E2_!5130 (+ (- 1) V4_0)))))
 (let (($x3405 (= E1_!5131 E1_!5129)))
 (let (($x956 (and (or (not R_E1_V1) (= E1_!5129 V1_0)) (or (not R_E1_V3) (= E2_!5130 V3_0)))))
 (let (($x1171 (not $x956)))
 (let (($x4736 (= E1_!5129 E1_!5120)))
 (let (($x1794 (and $x4736 (or $x1171 (= E1_!5131 E1_!5120)) (or $x1171 $x3405) (= E2_!5121 E2_!5122) (or (not (or (not R_E2_V1) (= E1_!5120 E1_!5129))) (= E2_!5121 E2_!5130)) (or (not (or (not R_E2_V1) $x4736)) (= E2_!5130 E2_!5122)) (or (not MW_S1_V1) W_S1_V1) (or (not MW_S1_V3) W_S1_V3) (or (not MW_S1_V2) W_S1_V2) (or (not MW_S1_V4) W_S1_V4) (or (not MW_S1_V6) W_S1_V6))))
 (or (not $x1794) (not $x4647) $x4364)))))))))
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 )
 ))
 (let (($x2790 (and W_S1_V6 R_E1_V6)))
 (let (($x3431 (and W_S1_V4 R_E1_V4)))
 (let (($x1285 (and W_S1_V2 R_E1_V2)))
 (let (($x2373 (and W_S1_V3 R_E1_V3)))
 (let (($x748 (and W_S1_V1 R_E1_V1)))
 (let (($x5789 (= DISJ_W_S1_R_E1 (not (or $x748 $x2373 $x1285 R_E1_V5 $x3431 $x2790)))))
 (let (($x1769 (and W_S1_V6 R_S1_V6)))
 (let (($x678 (and W_S1_V4 R_S1_V4)))
 (let (($x3813 (and W_S1_V2 R_S1_V2)))
 (let (($x5872 (and W_S1_V3 R_S1_V3)))
 (let (($x2040 (and W_S1_V1 R_S1_V1)))
 (let (($x2365 (= DISJ_W_S1_R_S1 (not (or $x2040 $x5872 $x3813 R_S1_V5 $x678 $x1769)))))
 (let (($x1428 (and W_S1_V6 R_E2_V6)))
 (let (($x2666 (and W_S1_V4 R_E2_V4)))
 (let (($x766 (and W_S1_V2 R_E2_V2)))
 (let (($x2537 (and W_S1_V1 R_E2_V1)))
 (let (($x5867 (= DISJ_W_S1_R_E2 (not (or $x2537 $x766 R_E2_V5 $x2666 $x1428)))))
 (let (($x2788 (not R_E2_V3)))
 (and (and $x2788 W_S1_V5 $x5867 $x2365 $x5789 $x3531) $x3552))))))))))))))))))))))
(check-sat)
